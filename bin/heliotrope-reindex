#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'trollop'
require 'rest_client'
require "heliotrope"
require 'fileutils'
require 'json'

opts = Trollop::options do
  banner <<EOS
Rebuilds the Whistlepig index for the current store. Does not change any data,
but will skip messages marked as deleted or spam by default.

Useful if you've added documents out of order and wish to reorder them, or if
the index has become corrupted.

Usage: #{$0} [options]

Where options include:
EOS
  opt :dir, "Base directory for all index files", :default => ".", :short => "d"
  opt :reorder, "Reorder all documents based on date header"
  opt :index_deleted, "Index deleted messages rather than skipping them"
  opt :index_spam, "Index spam messages rather than skipping them", :short => "s"
  opt :num, "Only process this many messages", :type => :int, :short => "n"
  opt :verbose, "Enable verbose output"
end
Trollop::die "invalid argument: #{ARGV.first}" unless ARGV.empty?

class Loader
  def initialize metaindex, zmbox, opts={}
    @metaindex = metaindex
    @zmbox = zmbox
    @load_spam = opts[:load_spam]
    @load_deleted = opts[:load_deleted]
    @sort = opts[:sort]
    @num_deleted = @num_spam = 0
  end

  attr_reader :num_deleted, :num_spam

  def each_message(&b)
    if @sort
      each_message_sorted(&b)
    else
      each_message_regular(&b)
    end
  end

private

  def each_message_regular
    doc_id = 0
    num_deleted = num_spam = 0
    startt = lastt = Time.now
    puts "Reindexing..."
    while true
      doc_id += 1
      message, state, labels, loc = get_message_summary_for doc_id
      break unless message 
      yield message, state, labels, loc
    end
  end

  def each_message_sorted
    ids_and_dates = []
    doc_id = 0
    puts "Loading dates..."
    while true
      doc_id += 1
      metainfo = @metaindex.load_messageinfo doc_id
      break unless metainfo
      ids_and_dates << [doc_id, metainfo[:date]]
    end
    puts "Sorting..."
    ids_and_dates.sort_by! { |id, date| date }
    puts "Reindexing..."
    ids_and_dates.each do |id, date|
      message, state, labels, loc = get_message_summary_for id
      break unless message 
      yield message, state, labels, loc
    end
  end

  def get_message_summary_for doc_id
    metainfo = @metaindex.load_messageinfo doc_id
    return unless metainfo

    message, state, labels, loc = if metainfo[:state].member?("deleted") && !@load_deleted
      @num_deleted += 1
      [nil, [], [], nil]
    elsif metainfo[:state].member?("spam") && !@load_spam
      @num_spam += 1
      [nil, [], [], nil]
    else
      rawbody = @zmbox.read metainfo[:loc]
      rawbody.force_encoding "binary" if rawbody.respond_to?(:force_encoding) # sigh...
      message = Heliotrope::Message.new(rawbody).parse!
      [message, metainfo[:state], metainfo[:labels], metainfo[:loc]]
    end
  end
end

FileUtils.mkdir_p File.join(opts.dir, "index-reindexed")
store = LevelDB::DB.new File.join(opts.dir, "store")

new_index_fn = File.join(opts.dir, "index-reindexed", "whistlepig")
if Whistlepig::Index.exists? new_index_fn
  abort "Error: a reindex already exists in #{File.join opts.dir, "index-reindexed"}. Delete that directory first."
end
if File.exists? File.join(opts.dir, "store-reindexed")
  abort "Error: a reindex already exists in #{File.join opts.dir, "store-reindexed"}. Delete that directory first."
end
index = Whistlepig::Index.new new_index_fn
store_new = LevelDB::DB.new File.join(opts.dir, "store-reindexed")
hooks = Heliotrope::Hooks.new File.join(opts.dir, "hooks")
metaindex = Heliotrope::MetaIndex.new store, nil, hooks # nil index! (for "security")
metaindex_new = Heliotrope::MetaIndex.new store_new, index, hooks 
zmbox = Heliotrope::ZMBox.new File.join(opts.dir, "messages")
loader = Loader.new metaindex, zmbox, :load_spam => opts.index_spam, :load_deleted => opts.index_deleted, :sort => opts.reorder

startt = lastt = Time.now
num_docs = 0
loader.each_message do |message, state, labels, loc|
  num_docs += 1
  metaindex_new.add_message message, state, labels, :loc => loc

  if (Time.now - lastt) > 5
    elapsed = Time.now - startt
    num_indexed = num_docs - loader.num_deleted - loader.num_spam
    printf "; reindexed %d messages, skipped %d spam and %d deleted in %.1fs = %.1f m/s\n", num_indexed, loader.num_spam, loader.num_deleted, elapsed, num_indexed / elapsed
    lastt = Time.now
  end

  break if opts.num && num_docs >= opts.num
end

elapsed = Time.now - startt
num_indexed = num_docs - loader.num_deleted - loader.num_spam
printf "; reindexed %d messages, skipped %d spam and %d deleted in %.1fs = %.1f m/s\n", num_indexed, loader.num_spam, loader.num_deleted, elapsed, num_indexed / elapsed

puts <<EOS
Done!
To use the new index, replace #{File.join opts.dir, "index"} with #{File.join opts.dir, "index-reindexed"}.
If you also re-ordered, replace #{File.join opts.dir, "store"} with #{File.join opts.dir, "store-reindexed"}. Otherwise, delete store-reindexed. 
EOS
