#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'trollop'
require 'rest_client'
require "heliotrope"
require 'json'

def ask q
  print "IMAP password (displayed!): "
  $stdout.flush
  (gets || abort).chomp
end

def ask_secret q
  begin
    `stty -echo`
    ask q
  ensure
    `stty echo`
  end
end

opts = Trollop::options do
  banner <<EOS
Adds an email or a set of emails to a Heliotrope server. By default, takes a
single message on stdin. Can also submit all the messages in an mbox file, a
maildir, or an IMAP folder.

Note that Heliotrope only serves threads in order of the submission time of
their messages. If you are using this tool to backfill from an existing store,
pay attention to the order of messaes.

Usage: #{$0} [options]

Where options include:
EOS
  opt :host, "Heliotrope server host", :default => "localhost", :short => "H"
  opt :port, "Heliotrope server port", :default => 8042
  opt :dir, "Don't use the server. Instead, write directly to the store directory.", :type => String
  opt :num_messages, "Index at most this many messages and then quit", :type => Integer, :short => "n"
  opt :num_skip, "Skip this many many messages and then start indexing", :type => Integer, :short => "k"
  opt :state_fn, "Store any server state in this file (IMAP and Gmail only)", :type => String
  opt :verbose, "Enable verbose output"

  banner <<EOS

Options for reading from an mbox file:
EOS
  opt :mbox_fn, "mbox filename", :type => String, :short => "m"
  opt :mbox_start_offset, "Start file offset for scanning", :default => 0, :short => "s"
  banner <<EOS

Options for reading from a maildir directory:
EOS
  opt :maildir_dirs, "maildir directory", :type => :strings
  banner <<EOS

Options for reading from an IMAP account:
EOS
  opt :imap_host, "IMAP server hostname", :type => String
  opt :imap_port, "IMAP server port (default: 993 with ssl, 143 without)", :type => Integer
  opt :dont_use_ssl, "Don't use SSL"
  opt :imap_username, "IMAP username (default: prompt)", :type => String
  opt :imap_password, "IMAP password (default: prompt)", :type => String
  opt :imap_folder, "IMAP folder", :default => "INBOX"

  banner <<EOS

Options for reading from a GMail account:
EOS
  opt :gmail_username, "GMail username (default: prompt)", :type => String
  opt :gmail_password, "GMail password (default: prompt)", :type => String

  banner <<EOS

If none of the mbox, maildir, IMAP or GMail options are given, will read a single
message from stdin.
EOS

  conflicts :mbox_fn, :maildir_dirs, :imap_host
end

if opts.mbox_fn || opts.maildir_dirs || opts.imap_host
  Trollop::die "unknown option #{ARGV.first}" unless ARGV.empty?
end

port = opts.imap_port || (opts.dont_use_ssl ? 143 : 993)

source = if opts.mbox_fn
  Heliotrope::MboxSplitter.new opts.mbox_fn, :start_offset => opts.mbox_start_offset
elsif opts.maildir_dirs
  Heliotrope::MaildirWalker.new(*opts.maildir_dirs)
elsif opts.imap_host
  username = opts.imap_username || ask("IMAP username: ")
  password = opts.imap_password || ask_secret("IMAP password: ")
  fn = opts.state_fn || File.join(ENV["HOME"], ".heliotrope-addrc-imap-#{opts.imap_host}-#{username}")
  Heliotrope::IMAPDumper.new :host => opts.imap_host, :port => port, :ssl => !opts.dont_use_ssl,
    :username => username, :password => password, :state_fn => fn, :folder => opts.imap_folder
elsif opts.gmail_username
  username = opts.gmail_username || ask("GMail username: ")
  password = opts.gmail_password || ask_secret("GMail password (displayed!): ")
  fn = opts.state_fn || File.join(ENV["HOME"], ".heliotrope-addrc-gmail-#{username}")
  Heliotrope::GMailDumper.new :username => username, :password => password, :state_fn => fn
else
  Heliotrope::MBoxStream.new $stdin
end

metaindex = zmbox = nil
if opts.dir
  FileUtils.mkdir_p opts.dir
  FileUtils.mkdir_p File.join(opts.dir, "index")
  store = LevelDB::DB.new File.join(opts.dir, "store")
  index = Whistlepig::Index.new File.join(opts.dir, "index", "whistlepig")
  hooks = Heliotrope::Hooks.new File.join(opts.dir, "hooks")
  metaindex = Heliotrope::MetaIndex.new store, index, hooks
  zmbox = Heliotrope::ZMBox.new File.join(opts.dir, "messages")
end

server_url = "http://#{opts.host}:#{opts.port}/message.json"
num_scanned = num_indexed = num_bad = num_seen = 0
startt = lastt = Time.now

begin
  puts "Loading mail..."
  source.load!

  source.skip! opts.num_skip if opts.num_skip
  until source.done?
    rawbody, labels, state, desc = source.next_message

    ## if the source can't set its own labels, we will just add everything to
    ## the inbox
    labels += %w(inbox) unless source.can_provide_labels?

    puts "; read #{desc} with labels {#{labels.join ", "}} and state {#{state.join ", "}}" if opts.verbose

    break if opts.num_messages && num_scanned >= opts.num_messages
    num_scanned += 1

    rawbody.force_encoding("binary") if rawbody.respond_to?(:force_encoding)

    if opts.dir
     begin
       message = Heliotrope::Message.new(rawbody).parse!
       if metaindex.contains_safe_msgid? message.safe_msgid
          num_seen += 1
        else
          labels = hooks.run "before-add-message-label", :message => message, :labels => labels, :rawbody => rawbody
          loc = zmbox.add rawbody
          metaindex.add_message message, state, labels, :loc => loc
          num_indexed += 1
        end
      rescue Heliotrope::InvalidMessageError => e
        num_bad += 1
      rescue Exception => e
        File.open("bad-message.txt", "w") { |f| f.write rawbody }
        $stderr.puts "* wrote broken message to bad-message.txt"
        raise e
      end
    else
      response = RestClient.post server_url, :message => rawbody, :state => state.to_json, :labels => labels.to_json
      response = JSON.parse(response)

      if response["response"] == "ok"
        if response["status"] == "seen"
          num_seen += 1
        else
          num_indexed += 1
        end
      else
        num_bad += 1
        #puts "Error for message at offset #{offset}: " + response["error_message"]
      end
    end

    if !source.done? && ((Time.now - lastt) > 5)
      elapsed = Time.now - startt
      printf "; scanned %d, indexed %d, skipped %d bad and %d seen messages in %.1fs = %.1f m/s\n", num_scanned, num_indexed, num_bad, num_seen, elapsed, num_scanned / elapsed
      lastt = Time.now
    end
  end
ensure
  source.finish!
end

elapsed = Time.now - startt
printf "; scanned %d, indexed %d, skipped %d bad and %d seen messages in %.1fs = %.1f m/s\n", num_scanned, num_indexed, num_bad, num_seen, elapsed, num_scanned / elapsed

puts "Done."
